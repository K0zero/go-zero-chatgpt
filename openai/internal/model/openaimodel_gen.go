// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	openaiFieldNames          = builder.RawFieldNames(&Openai{})
	openaiRows                = strings.Join(openaiFieldNames, ",")
	openaiRowsExpectAutoSet   = strings.Join(stringx.Remove(openaiFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	openaiRowsWithPlaceHolder = strings.Join(stringx.Remove(openaiFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheChatgptOpenaiIdPrefix  = "cache:chatgpt:openai:id:"
	cacheChatgptOpenaiApiPrefix = "cache:chatgpt:openai:api:"
)

type (
	openaiModel interface {
		Insert(ctx context.Context, data *Openai) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Openai, error)
		FindOneByApi(ctx context.Context, api string) (*Openai, error)
		Update(ctx context.Context, data *Openai) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOpenaiModel struct {
		sqlc.CachedConn
		table string
	}

	Openai struct {
		Id         int64     `db:"id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"`
		Version    int64     `db:"version"` // 版本号
		Api        string    `db:"api"`     // 订单号
		UserId     int64     `db:"user_id"` // 用户id
	}
)

func newOpenaiModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOpenaiModel {
	return &defaultOpenaiModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`openai`",
	}
}

func (m *defaultOpenaiModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	chatgptOpenaiApiKey := fmt.Sprintf("%s%v", cacheChatgptOpenaiApiPrefix, data.Api)
	chatgptOpenaiIdKey := fmt.Sprintf("%s%v", cacheChatgptOpenaiIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chatgptOpenaiApiKey, chatgptOpenaiIdKey)
	return err
}

func (m *defaultOpenaiModel) FindOne(ctx context.Context, id int64) (*Openai, error) {
	chatgptOpenaiIdKey := fmt.Sprintf("%s%v", cacheChatgptOpenaiIdPrefix, id)
	var resp Openai
	err := m.QueryRowCtx(ctx, &resp, chatgptOpenaiIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", openaiRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOpenaiModel) FindOneByApi(ctx context.Context, api string) (*Openai, error) {
	chatgptOpenaiApiKey := fmt.Sprintf("%s%v", cacheChatgptOpenaiApiPrefix, api)
	var resp Openai
	err := m.QueryRowIndexCtx(ctx, &resp, chatgptOpenaiApiKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `api` = ? limit 1", openaiRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, api); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOpenaiModel) Insert(ctx context.Context, data *Openai) (sql.Result, error) {
	data.DeleteTime = time.Unix(0, 0)
	chatgptOpenaiApiKey := fmt.Sprintf("%s%v", cacheChatgptOpenaiApiPrefix, data.Api)
	chatgptOpenaiIdKey := fmt.Sprintf("%s%v", cacheChatgptOpenaiIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, openaiRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Api, data.UserId)
	}, chatgptOpenaiApiKey, chatgptOpenaiIdKey)
	return ret, err
}

func (m *defaultOpenaiModel) Update(ctx context.Context, newData *Openai) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	chatgptOpenaiApiKey := fmt.Sprintf("%s%v", cacheChatgptOpenaiApiPrefix, data.Api)
	chatgptOpenaiIdKey := fmt.Sprintf("%s%v", cacheChatgptOpenaiIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, openaiRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.Api, newData.UserId, newData.Id)
	}, chatgptOpenaiApiKey, chatgptOpenaiIdKey)
	return err
}

func (m *defaultOpenaiModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheChatgptOpenaiIdPrefix, primary)
}

func (m *defaultOpenaiModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", openaiRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOpenaiModel) tableName() string {
	return m.table
}
